version: '3.8'

services:
  fastapi_server:
    container_name: fastapi_server
    build: ./fastapi-alembic-sqlmodel-async
    restart: always
    command: "sh -c 'alembic upgrade head && uvicorn app.main:app --reload --workers 1 --host 0.0.0.0 --port 8000'"
    volumes:
      - ./fastapi-alembic-sqlmodel-async:/code
    expose:
      - "8000"
    env_file: ".env"
    depends_on:
      - database
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.fastapi_local.entrypoints=web"
      - "traefik.http.routers.fastapi_local.rule=Host(`fastapi.${LOCAL_1}`, `fastapi.${LOCAL_2}`, `fastapi.${EXT_ENDPOINT1}`)"
      - traefik.http.services.fastapi_localservice.loadbalancer.server.port=8000
  
  database:
    image: bitnami/postgresql:13.3.0
    restart: always
    container_name: database
    env_file: ".env"
    user: root
    volumes:
      - ./db_docker:/bitnami/postgresql
    ports:
      - 5454:5432  # Remove this on production
    expose:
      - 5432
    environment:
      - POSTGRES_USERNAME=${DATABASE_USER}
      - POSTGRES_PASSWORD=${DATABASE_PASSWORD}
      - POSTGRES_DATABASE=${DATABASE_NAME}
      - POSTGRES_HOST_AUTH_METHOD= "trust"
      - POSTGRESQL_POSTGRES_PASSWORD= ${DATABASE_PASSWORD}

  keycloak:
    image: jboss/keycloak:16.1.0  
    container_name: keycloak 
    volumes:
      - ./keycloak/realm-export.json:/opt/jboss/keycloak/imports/realm-export.json
    command:
      - "-b 0.0.0.0 -Dkeycloak.profile.feature.upload_scripts=enabled -Dkeycloak.import=/opt/jboss/keycloak/imports/realm-export.json"
    environment:
      DB_VENDOR: POSTGRES
      DB_ADDR: ${DATABASE_HOST}
      DB_DATABASE: "${KEYCLOAK_DATABASE}"
      DB_USER: "${DATABASE_USER}"
      DB_SCHEMA: public
      DB_PASSWORD: "${DATABASE_PASSWORD}"
      KEYCLOAK_USER: "${KEYCLOAK_USER}"
      KEYCLOAK_PASSWORD: "${KEYCLOAK_PASSWORD}"
      PROXY_ADDRESS_FORWARDING: "true"
      #ALL, DEBUG, ERROR, FATAL, INFO, OFF, TRACE and WARN.
      KEYCLOAK_LOGLEVEL: OFF
    logging:
      driver: none
    expose:
      - "8080"       
    depends_on:
      - database
    restart:
      always
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.keycloak_local.entrypoints=web"
      - "traefik.http.routers.keycloak_local.rule=Host(`keycloak.${LOCAL_1}`, `keycloak.${LOCAL_2}`, `keycloak.${EXT_ENDPOINT1}`, `keycloak.${EXT_ENDPOINT2}`, `keycloak.${EXT_ENDPOINT3}`)"
      - traefik.http.services.keycloak_localservice.loadbalancer.server.port=8080

  traefik-proxy:
    container_name: traefik-proxy
    restart: always
    image: "traefik:latest"
    command:
      - "--providers.docker=true"
    expose:
      - 80
    depends_on:      
      - fastapi_server
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - ./traefik/traefik.yml:/traefik.yml:ro
      - ./traefik/.htpasswd:/.htpasswd
      - "${EB_LOG_BASE_DIR:-./traefik}/traefik-proxy:/logs"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dashboard.rule=Host(`traefik.${LOCAL_1}`, `traefik.${LOCAL_2}`, `traefik.${EXT_ENDPOINT1}`)"
      - "traefik.http.routers.dashboard.service=api@internal"
      - "traefik.http.routers.dashboard.middlewares=auth"
      - "traefik.http.middlewares.auth.basicauth.usersfile=/.htpasswd"

  nginx:
    container_name: nginx
    restart: unless-stopped
    logging:
      driver: none
    image: "nginx:latest"
    ports:
      - "80:8080"
    volumes:
      - ./static:/code/static
      - ./nginx-config-files/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx-config-files/app.nginx.template:/etc/nginx/templates/app.nginx.template
      - "${EB_LOG_BASE_DIR:-./nginx-config-files}/nginx-proxy:/var/log/nginx"